(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\connection.py", line 104, in reconnect\n    self.connection = f()\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "MySQLdb/__init__.py", line 81, in Connect\n  File "MySQLdb/connections.py", line 193, in __init__\nOperationalError: (2005, "Unknown MySQL server host \'mysql.hostinger.com.br\' (0)")\n'
p3
sS'layer'
p4
S'C:\\Users\\jessica_andrade\\Desktop\\web2py\\applications\\monitorar\\models\\db.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n'''\nif request.is_local:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL('sqlite://storage.db')\nelse:\n    #/Quando o sistema esta no servidor do pythonanywhere, o mesmo utiliza mysql\n    db = DAL('mysql://monitorar:ar123@monitorar.mysql.pythonanywhere-services.com/$default')\n\n'''\n\ndb = DAL('mysql://u552527967_monit:ar123456@mysql.hostinger.com.br/u552527967_monit')\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be 'controller/function.extension'\nresponse.generic_patterns = ['*'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take('forms.formstyle')  # or 'bootstrap3_stacked' or 'bootstrap2' or other\nresponse.form_label_separator = myconf.take('forms.separator')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = 'concat,minify,inline'\n# response.optimize_js = 'concat,minify,inline'\n## (optional) static assets folder versioning\n# response.static_version = '0.0.0'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\n\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n#Campos extras do usu\xc3\xa1rio\nauth.settings.extra_fields['auth_user']= [\n  Field('cidade', 'reference cidades')\n  ]\n\n#Tabela para armazenar as estados que possem o harware instalado\ndb.define_table('estados',\n    Field('nome_estado', type='string'),\n    Field('abreviacao', type='string'), \n    format='%(nome_estado)s'\n    )\n\n#Tabela para armazenar as cidades que possem o harware instalado\ndb.define_table('cidades',\n    Field('nome_cidade', type='string'),\n    Field('estado', 'reference estados'),\n    format='%(nome_cidade)s'\n    )\n\n\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = 'logging' if request.is_local else myconf.take('smtp.server')\nmail.settings.sender = myconf.take('smtp.sender')\nmail.settings.login = myconf.take('smtp.login')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table('mytable',Field('myfield','string'))\n##\n## Fields can be 'string','text','password','integer','double','boolean'\n##       'date','time','datetime','blob','upload', 'reference TABLENAME'\n## There is an implicit 'id integer autoincrement' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield='value')\n## >>> rows=db(db.mytable.myfield=='value').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\ndb.define_table('sensor',\n    Field('tipo_sensor', type='string'),\n    Field('unidade', type='string'),\n    format='%(tipo_sensor)s'\n    )\n\ndb.define_table('hardwares',\n    Field('descricao', type='string'),\n    Field('cidade', 'reference cidades'),\n    Field('latitude', type='string'),\n    Field('longitude', type='string'),\n    Field('sensores', 'list:reference sensor'),\n    Field('senha', 'string'),\n    format='%(descricao)s'\n    )\n\ndb.define_table('leituras',\n    Field('hardware', 'reference hardwares'),\n    Field('sensor', 'reference sensor'),\n    Field('valor', 'double'),\n    Field('data_leitura', 'date'),\n    Field('hora_leitura', 'time'),\n    format='%(sensor)s'\n    )\n\ndb.define_table('autoridades',\n     Field('nome', type='string'),\n     Field('email', type='string'),\n     Field('telefone', type='string'),\n     Field('cidade', 'reference cidades'),\n     Field('tipo',type='string'),\n     format='%(nome)s'\n    )\n\ndb.autoridades.nome.requires = IS_IN_SET(['Municipal', 'Estadual', 'Federal','Internacional'],error_message='Escolha um tipo para a autoridade!')"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\applications\\monitorar\\models\\db.py", line 27, in <module>\n    db = DAL(\'mysql://u552527967_monit:ar123456@mysql.hostinger.com.br/u552527967_monit\')\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 459, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\mysql.py", line 132, in __init__\n    if do_connect: self.reconnect()\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\connection.py", line 104, in reconnect\n    self.connection = f()\n  File "C:\\Users\\jessica_andrade\\Desktop\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\mysql.py", line 130, in connector\n    return self.driver.connect(**driver_args)\n  File "MySQLdb/__init__.py", line 81, in Connect\n  File "MySQLdb/connections.py", line 193, in __init__\nOperationalError: (2005, "Unknown MySQL server host \'mysql.hostinger.com.br\' (0)")\n\n'
p11
s.